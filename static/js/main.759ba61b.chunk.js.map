{"version":3,"sources":["Table.jsx","App.js","serviceWorker.js","index.js"],"names":["BingoTable","state","tiles","name","isChecked","toggleChecked","event","tileID","target","id","setState","previousState","map","row","tile","copyTile","console","log","this","key","className","toString","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQA8DeA,E,4MAzDXC,MAAQ,CACJC,MAAO,CAAC,CAAC,CAACC,KAAM,WAAYC,WAAW,GAAO,CAACD,KAAK,cAAeC,WAAU,GAC7E,CAACD,KAAK,cAAeC,WAAU,GAAO,CAACD,KAAK,4BAA6BC,WAAU,GACnF,CAACD,KAAK,UAAWC,WAAU,IAAQ,CAAC,CAACD,KAAK,4BAA8BC,WAAU,GAClF,CAACD,KAAK,WAAYC,WAAU,GAAO,CAACD,KAAK,oBAAqBC,WAAU,GACxE,CAACD,KAAK,UAAWC,WAAU,GAAO,CAACD,KAAK,kBAAmBC,WAAU,IACrE,CAAC,CAACD,KAAK,yBAA0BC,WAAU,GAAO,CAACD,KAAK,wBAAyBC,WAAU,GAC3F,CAACD,KAAK,cAAeC,WAAU,GAAO,CAACD,KAAK,+BAAgCC,WAAU,GACtF,CAACD,KAAK,gBAAiBC,WAAU,IAAQ,CAAC,CAACD,KAAK,eAAgBC,WAAU,GAC1E,CAACD,KAAK,UAAWC,WAAU,GAAO,CAACD,KAAK,4BAA6BC,WAAU,GAC/E,CAACD,KAAK,kBAAmBC,WAAU,GAAO,CAACD,KAAK,QAASC,WAAU,IACnE,CAAC,CAACD,KAAK,KAAMC,WAAU,GAAO,CAACD,KAAK,mBAAoBC,WAAU,GAClE,CAACD,KAAK,+BAAgCC,WAAU,GAAO,CAACD,KAAK,QAASC,WAAU,GAChF,CAACD,KAAK,eAAgBC,WAAU,M,EAGpCC,cAAgB,SAACC,GACb,IAAMC,EAASD,EAAME,OAAOC,GAC5B,EAAKC,UAAS,SAACC,GAeX,MAAO,CACHT,MAfc,YAAOS,EAAcT,OACTU,KAAI,SAAAC,GAWlC,OAVmB,YAAIA,GAAKD,KAAI,SAAAE,GACxB,IAAMC,EAAQ,eAAOD,GACrB,OAAGP,IAAWQ,EAASZ,MACnBY,EAASX,WAAaU,EAAKV,UAC3BY,QAAQC,IAAIF,GACLA,GAEAA,a,uDAYjB,IAAD,OACL,OAAQ,+BACJ,+BACCG,KAAKjB,MAAMC,MAAMU,KAAI,SAAAC,GAClB,OAAQ,wBAAIM,IAAKN,EAAI,GAAGV,MACnBU,EAAID,KAAI,SAAAE,GACN,OAAQ,wBAAIK,IAAKL,EAAKX,KAAMiB,WAAWN,EAAKX,KAAMW,EAAKV,UAAUiB,YAAYZ,GAAIK,EAAKX,KAAMmB,QAAS,EAAKjB,eACrG,uBAAGI,GAAIK,EAAKX,MAAOW,EAAKX,oB,GAhD3BoB,IAAMC,WCYhBC,MAZf,WAEE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,gEAEA,kBAAC,EAAD,QCCYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.759ba61b.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nclass BingoTable extends React.Component {\n    state = {\n        tiles: [[{name: 'Tim Cook', isChecked: false},{name:'Jiggle Mode', isChecked:false},\n        {name:'iPhone mini', isChecked:false},{name:'No Charger with New Phone', isChecked:false},\n        {name:'HomePod', isChecked:false}],[{name:'We Think You\\'ll Love Them', isChecked:false},\n        {name:'Eddy Cue', isChecked:false},{name:'iPhone 12 Pro Max', isChecked:false},\n        {name:'Airtags', isChecked:false},{name:'Best iPhone yet', isChecked:false}],\n        [{name:'Augmented Reality Demo', isChecked:false},{name:'Wireless Charging Mat', isChecked:false},\n        {name:'Free Square', isChecked:false},{name:'Best Camera in a Smart Phone', isChecked:false},\n        {name:'Smaller Notch', isChecked:false}],[{name:'Silicon Macs', isChecked:false},\n        {name:'AirPods', isChecked:false},{name:'Touch ID in Unlock Button', isChecked:false},\n        {name:'Craig Federighi', isChecked:false},{name:'120hz', isChecked:false}],\n        [{name:'5G', isChecked:false},{name:'New Funky Colour', isChecked:false},\n        {name:'No Headphones with New Phone', isChecked:false},{name:'LiDar', isChecked:false},\n        {name:'Lisa Jackson', isChecked:false}]]\n      }\n\n    toggleChecked = (event) => {\n        const tileID = event.target.id;\n        this.setState((previousState) => {\n            const currentState = [...previousState.tiles];\n            const newState = currentState.map(row => {\n                const newRow = [...row].map(tile => {\n                    const copyTile = {...tile}\n                    if(tileID === copyTile.name) {\n                        copyTile.isChecked = !tile.isChecked\n                        console.log(copyTile)\n                        return copyTile\n                    } else {\n                        return copyTile;\n                    }\n                })\n            return newRow;\n            })\n            return {\n                tiles: newState\n            }\n        })\n    }\n\n\n    render() {\n        return (<table>\n            <tbody>\n            {this.state.tiles.map(row => {\n                return (<tr key={row[0].name}>\n                    {row.map(tile => {\n                       return (<td key={tile.name} className={tile.name, tile.isChecked.toString()} id={tile.name} onClick={this.toggleChecked}>\n                            <p id={tile.name}>{tile.name}</p>\n                        </td>)\n                    })}\n                </tr>)\n        })}\n        </tbody>\n        </table>)\n    }\n}\n\nexport default BingoTable","import React from 'react';\nimport './App.css';\nimport BingoTable from './Table'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Apple iPhone Keynote BINGO 2020</h1>\n      </header>\n        <BingoTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}